{"version":3,"sources":["components/ForexBaseInput.js","components/ForexAddCurrency.js","utils/index.js","components/ForexDisplayCard.js","components/ForexDisplayList.js","containers/ForexContainer.js","App.js","serviceWorker.js","index.js"],"names":["ForexBaseInput","_ref","value","onInputChange","react_default","a","createElement","className","Row","Col","Input","type","name","step","min","onChange","placeholder","ForexAddCurrency","options","onSubmitAddCurrency","onClickAddMoreCurrency","isAddMoreCurrency","InputGroup","map","curr","key","InputGroupAddon","addonType","Button","color","onClick","disabled","block","defaultProps","currencyFormatter","currency","maxDigits","Math","floor","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","formatCurrencyOptions","currencies","arguments","length","undefined","selectedArray","source","target","filter","v","includes","filterCurrencies","Object","keys","getCurrencyNames","ForexDisplayCard","base","currencyName","baseValue","exchangeValue","onDeleteCurrency","Card","sm","xs","CardBody","title","ForexDisplayList","error","isLoaded","rates","currencyNames","handleDeleteCurrency","message","components_ForexDisplayCard","ForexContainer","state","currencyRates","currencyDisplays","selectedNewCurrency","fetchCurrencyRates","axios","get","then","response","_this","setState","data","catch","fetchCurrencyNames","handleInputChange","e","_e$target","inputValue","parseFloat","defineProperty","handleClickAddMoreCurrency","handleAddCurrency","_this$state","concat","toConsumableArray","deletedCurrency","filteredCurrency","this","_this$state2","Container","components_ForexBaseInput","components_ForexDisplayList","components_ForexAddCurrency","Component","App","containers_ForexContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAqCeA,EAjCQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,cAAV,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,4CAINF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,YACLC,KAAK,MACLC,IAAI,IACJZ,MAAOA,EACPa,SAAUZ,EACVa,YAAY,+DCrBhBC,EAAmB,SAAAhB,GAAA,IACvBiB,EADuBjB,EACvBiB,QACAhB,EAFuBD,EAEvBC,MACAC,EAHuBF,EAGvBE,cACAgB,EAJuBlB,EAIvBkB,oBACAC,EALuBnB,EAKvBmB,uBACAC,EANuBpB,EAMvBoB,kBANuB,OAQvBjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZc,EACCjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,sBACLV,MAAOA,EACPa,SAAUZ,GAEVC,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,IAAd,oBACCgB,EAAQK,IAAI,SAAAC,GAAI,OACfpB,EAAAC,EAAAC,cAAA,UAAQmB,IAAKD,EAAMtB,MAAOsB,GACvBA,MAIPpB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAiBC,UAAU,UACzBvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACEC,MAAM,UACNC,QAASX,EACTY,SAAoB,KAAV7B,GAHZ,YAUJE,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,MAAM,OAAOG,OAAK,EAACF,QAASV,GAApC,6BAgBNH,EAAiBgB,aAAe,CAC9BZ,mBAAmB,GAGNJ,wBC3DFiB,EAAoB,SAAAC,GAC/B,IAAIC,EAAY,EAOhB,OAJIC,KAAKC,MAAMH,GAAY,MACzBC,EAAY,GAGP,IAAIG,KAAKC,aAAa,QAAS,CACpCC,sBAAuB,EACvBC,sBAAuBN,IACtBO,OAAOR,IAaCS,EAAwB,WAAyC,IAAxCC,EAAwCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3B,GAAIG,EAAuBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAGrE,OAT8B,WAA8B,IAA7BI,EAA6BJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,GAAIK,EAAgBL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAGrD,OAFiBI,EAAOE,OAAO,SAAAC,GAAC,OAAKF,EAAOG,SAASD,KAQ9CE,CAZuB,eAACV,EAADC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAc,GAAd,OAAqBU,OAAOC,KAAKZ,GAUzCa,CAAiBb,GAEAI,IC2C1BU,EAhEU,SAAA1D,GAAA,IDyBQ2D,ECxB/BzB,EADuBlC,EACvBkC,SACA0B,EAFuB5D,EAEvB4D,aACAC,EAHuB7D,EAGvB6D,UACAC,EAJuB9D,EAIvB8D,cACAC,EALuB/D,EAKvB+D,iBALuB,OAOvB5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAM1D,UAAU,cACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKyD,GAAI,GAAIC,GAAI,EAAG5D,UAAU,qBAC5BH,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KACEhE,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,UAAK6B,IAEP/B,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBDanB2B,GAHoB,MADI0B,ECRCE,GDSA,EAAIF,GCTOG,MAInC3D,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACG6B,EADH,MACgB0B,MAKtBzD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,uBACW6B,EADX,IACsBD,EAAkB6B,QAOhD3D,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKyD,GAAI,EAAGC,GAAI,EAAG5D,UAAU,sBAC3BH,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACErB,UAAU,sBACVsB,MAAM,UACNG,OAAK,EACLF,QAAS,kBAAMkC,EAAiB7B,IAChCkC,MAAM,mBAENjE,EAAAC,EAAAC,cAAA,wBCjDJgE,EAAmB,SAAArE,GAQnB,IAPJsE,EAOItE,EAPJsE,MACAC,EAMIvE,EANJuE,SACA3B,EAKI5C,EALJ4C,WACA4B,EAIIxE,EAJJwE,MACAX,EAGI7D,EAHJ6D,UACAY,EAEIzE,EAFJyE,cACAC,EACI1E,EADJ0E,qBAEA,OAAIJ,EACKnE,EAAAC,EAAAC,cAAA,qBAAaiE,EAAMK,SAEvBJ,EAIHpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZsC,EAAWtB,IAAI,SAAAY,GAAQ,OACtB/B,EAAAC,EAAAC,cAACuE,EAAD,CACEpD,IAAKU,EACL2B,UAAWA,EACX3B,SAAUA,EACV4B,cAAeU,EAAMtC,GACrB0B,aAAca,EAAcvC,GAC5B6B,iBAAkBW,OAXjBvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,eA4BX+D,EAAiBrC,aAAe,CAC9BuC,UAAU,GAGGF,QC0FAQ,6MAjIbC,MAAQ,CACNR,MAAO,KACPC,UAAU,EACVV,UAAW,GACXkB,cAAe,GACfC,iBAAkB,CAAC,MAAO,MAAO,MAAO,OACxCC,oBAAqB,GACrB7D,mBAAmB,EACnBqD,cAAe,MAQjBS,mBAAqB,WACnBC,IACGC,IAAI,mDACJC,KAAK,SAAAC,GACJC,EAAKC,SAAS,CACZjB,UAAU,EACVQ,cAAeO,EAASG,KAAKjB,UAGhCkB,MAAM,SAAApB,GACLiB,EAAKC,SAAS,CACZjB,UAAU,EACVD,eAKRqB,mBAAqB,WACnBR,IACGC,IAAI,qDACJC,KAAK,SAAAC,GACJC,EAAKC,SAAS,CACZf,cAAea,EAASG,SAG3BC,MAAM,SAAApB,GACLiB,EAAKC,SAAS,CACZlB,eAKRsB,kBAAoB,SAAAC,GAAK,IAAAC,EACCD,EAAE3C,OAAlBjD,EADe6F,EACf7F,MAAOU,EADQmF,EACRnF,KAGXoF,EAAa9F,EACJ,cAATU,IACFoF,EAAaC,WAAW/F,IAAU,IAGpCsF,EAAKC,SAALjC,OAAA0C,EAAA,EAAA1C,CAAA,GAAiB5C,EAAOoF,OAG1BG,2BAA6B,WAC3BX,EAAKC,SAAS,CAAEpE,mBAAmB,OAGrC+E,kBAAoB,WAAM,IAAAC,EAC0Bb,EAAKT,MAA/CE,EADgBoB,EAChBpB,iBAAkBC,EADFmB,EACEnB,oBAE1BM,EAAKC,SAAS,CACZR,iBAAgB,GAAAqB,OAAA9C,OAAA+C,EAAA,EAAA/C,CAAMyB,GAAN,CAAwBC,IACxCA,oBAAqB,GACrB7D,mBAAmB,OAIvBsD,qBAAuB,SAAA6B,GAAmB,IAIlCC,EAHuBjB,EAAKT,MAA1BE,iBAGkC7B,OACxC,SAAAC,GAAC,OAAIA,IAAMmD,IAGbhB,EAAKC,SAAS,CACZR,iBAAkBwB,wFAvEpBC,KAAKvB,qBACLuB,KAAKd,sDA0EE,IAAAe,EAUHD,KAAK3B,MARPR,EAFKoC,EAELpC,MACAC,EAHKmC,EAGLnC,SACAV,EAJK6C,EAIL7C,UACAkB,EALK2B,EAKL3B,cACAC,EANK0B,EAML1B,iBACAC,EAPKyB,EAOLzB,oBACA7D,EARKsF,EAQLtF,kBACAqD,EATKiC,EASLjC,cAGF,OACEtE,EAAAC,EAAAC,cAACsG,EAAA,EAAD,KACExG,EAAAC,EAAAC,cAACuG,EAAD,CACE3G,MAAO4D,EACP3D,cAAeuG,KAAKb,oBAGtBzF,EAAAC,EAAAC,cAACwG,EAAD,CACEvC,MAAOA,EACPC,SAAUA,EACVV,UAAWA,EACXjB,WAAYoC,EACZR,MAAOO,EACPN,cAAeA,EACfC,qBAAsB+B,KAAK/B,uBAG7BvE,EAAAC,EAAAC,cAACyG,EAAD,CACE7F,QAAS0B,EAAsBoC,EAAeC,GAC9C/E,MAAOgF,EACP7D,kBAAmBA,EACnBlB,cAAeuG,KAAKb,kBACpB1E,oBAAqBuF,KAAKN,kBAC1BhF,uBAAwBsF,KAAKP,qCA3HVa,aCMdC,mLARX,OACE7G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4G,EAAD,cAJUF,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrH,EAAAC,EAAAC,cAACoH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.544662a6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Input } from 'reactstrap';\n\nconst ForexBaseInput = ({ value, onInputChange }) => (\n  <div className=\"header\">\n    <Row>\n      <Col>\n        <p>\n          <em>USD - United States Dollars</em>\n        </p>\n      </Col>\n    </Row>\n    <Row>\n      <Col>\n        <h3>USD</h3>\n      </Col>\n      <Col>\n        <Input\n          type=\"number\"\n          name=\"baseValue\"\n          step=\"any\"\n          min=\"0\"\n          value={value}\n          onChange={onInputChange}\n          placeholder=\"Enter Base Currency Value Here\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\nForexBaseInput.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onInputChange: PropTypes.func.isRequired\n};\n\nexport default ForexBaseInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, InputGroup, InputGroupAddon, Button } from 'reactstrap';\n\nconst ForexAddCurrency = ({\n  options,\n  value,\n  onInputChange,\n  onSubmitAddCurrency,\n  onClickAddMoreCurrency,\n  isAddMoreCurrency\n}) => (\n  <div className=\"forex-add-currency\">\n    {isAddMoreCurrency ? (\n      <InputGroup>\n        <Input\n          type=\"select\"\n          name=\"selectedNewCurrency\"\n          value={value}\n          onChange={onInputChange}\n        >\n          <option value=\"\">Select Currency!</option>\n          {options.map(curr => (\n            <option key={curr} value={curr}>\n              {curr}\n            </option>\n          ))}\n        </Input>\n        <InputGroupAddon addonType=\"append\">\n          <Button\n            color=\"primary\"\n            onClick={onSubmitAddCurrency}\n            disabled={value === ''}\n          >\n            Submit\n          </Button>\n        </InputGroupAddon>\n      </InputGroup>\n    ) : (\n      <Button color=\"info\" block onClick={onClickAddMoreCurrency}>\n        (+) Add More Currencies\n      </Button>\n    )}\n  </div>\n);\n\nForexAddCurrency.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  value: PropTypes.string.isRequired,\n  onInputChange: PropTypes.func.isRequired,\n  onSubmitAddCurrency: PropTypes.func.isRequired,\n  onClickAddMoreCurrency: PropTypes.func.isRequired,\n  isAddMoreCurrency: PropTypes.bool\n};\n\nForexAddCurrency.defaultProps = {\n  isAddMoreCurrency: false\n};\n\nexport default ForexAddCurrency;\n","export const currencyFormatter = currency => {\n  let maxDigits = 2;\n\n  // check if value is below 2 digits\n  if (Math.floor(currency) < 100) {\n    maxDigits = 4;\n  }\n\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: maxDigits\n  }).format(currency);\n};\n\n// convert currencies object property into array of currencies name\nexport const getCurrencyNames = (currencies = {}) => Object.keys(currencies);\n\n// function to remove selected currency from appearing in currencies dropdown\nexport const filterCurrencies = (source = [], target = []) => {\n  const filtered = source.filter(v => !target.includes(v));\n\n  return filtered;\n};\n\nexport const formatCurrencyOptions = (currencies = {}, selectedArray = []) => {\n  const currencyArray = getCurrencyNames(currencies);\n\n  return filterCurrencies(currencyArray, selectedArray);\n};\n\n// calculate exchange rates\nexport const getExchangeRates = (base, exchange) => {\n  const baseValue = base === '' ? 0 : base;\n  const converted = baseValue * exchange;\n\n  return currencyFormatter(converted);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardBody, Row, Col, Button } from 'reactstrap';\n\nimport { getExchangeRates, currencyFormatter } from '../utils';\n\nconst ForexDisplayCard = ({\n  currency,\n  currencyName,\n  baseValue,\n  exchangeValue,\n  onDeleteCurrency\n}) => (\n  <Card className=\"forex-card\">\n    <Row>\n      <Col sm={11} xs={9} className=\"forex-column-left\">\n        <CardBody>\n          <Row>\n            <Col>\n              <h4>{currency}</h4>\n            </Col>\n            <Col>\n              <h4 className=\"exchange-value\">\n                {getExchangeRates(baseValue, exchangeValue)}\n              </h4>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h6>\n                <em>\n                  {currency} - {currencyName}\n                </em>\n              </h6>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <span>\n                1 USD = {currency} {currencyFormatter(exchangeValue)}\n              </span>\n            </Col>\n          </Row>\n        </CardBody>\n      </Col>\n\n      <Col sm={1} xs={3} className=\"forex-column-right\">\n        <Button\n          className=\"btn-delete-currency\"\n          color=\"default\"\n          block\n          onClick={() => onDeleteCurrency(currency)}\n          title=\"Delete Currency\"\n        >\n          <span>(-)</span>\n        </Button>\n      </Col>\n    </Row>\n  </Card>\n);\n\nForexDisplayCard.propTypes = {\n  currency: PropTypes.string.isRequired,\n  currencyName: PropTypes.string.isRequired,\n  baseValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  exchangeValue: PropTypes.number.isRequired,\n  onDeleteCurrency: PropTypes.func.isRequired\n};\n\nexport default ForexDisplayCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ForexDisplayCard from './ForexDisplayCard';\n\nconst ForexDisplayList = ({\n  error,\n  isLoaded,\n  currencies,\n  rates,\n  baseValue,\n  currencyNames,\n  handleDeleteCurrency\n}) => {\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n  if (!isLoaded) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n  return (\n    <div className=\"forex-display-list\">\n      {currencies.map(currency => (\n        <ForexDisplayCard\n          key={currency}\n          baseValue={baseValue}\n          currency={currency}\n          exchangeValue={rates[currency]}\n          currencyName={currencyNames[currency]}\n          onDeleteCurrency={handleDeleteCurrency}\n        />\n      ))}\n    </div>\n  );\n};\n\nForexDisplayList.propTypes = {\n  isLoaded: PropTypes.bool,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  baseValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  rates: PropTypes.objectOf(PropTypes.number).isRequired,\n  currencyNames: PropTypes.objectOf(PropTypes.string).isRequired,\n  handleDeleteCurrency: PropTypes.func.isRequired\n};\n\nForexDisplayList.defaultProps = {\n  isLoaded: false\n};\n\nexport default ForexDisplayList;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Container } from 'reactstrap';\n\nimport ForexBaseInput from '../components/ForexBaseInput';\nimport ForexAddCurrency from '../components/ForexAddCurrency';\nimport ForexDisplayList from '../components/ForexDisplayList';\n\nimport { formatCurrencyOptions } from '../utils';\n\nclass ForexContainer extends Component {\n  state = {\n    error: null,\n    isLoaded: false,\n    baseValue: 10.0,\n    currencyRates: {},\n    currencyDisplays: ['IDR', 'EUR', 'GBP', 'SGD'],\n    selectedNewCurrency: '',\n    isAddMoreCurrency: false,\n    currencyNames: {}\n  };\n\n  componentDidMount() {\n    this.fetchCurrencyRates();\n    this.fetchCurrencyNames();\n  }\n\n  fetchCurrencyRates = () => {\n    axios\n      .get('https://api.exchangeratesapi.io/latest?base=USD')\n      .then(response => {\n        this.setState({\n          isLoaded: true,\n          currencyRates: response.data.rates\n        });\n      })\n      .catch(error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n  };\n\n  fetchCurrencyNames = () => {\n    axios\n      .get('https://openexchangerates.org/api/currencies.json')\n      .then(response => {\n        this.setState({\n          currencyNames: response.data\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error\n        });\n      });\n  };\n\n  handleInputChange = e => {\n    const { value, name } = e.target;\n\n    // special case for base value input\n    let inputValue = value;\n    if (name === 'baseValue') {\n      inputValue = parseFloat(value) || '';\n    }\n\n    this.setState({ [name]: inputValue });\n  };\n\n  handleClickAddMoreCurrency = () => {\n    this.setState({ isAddMoreCurrency: true });\n  };\n\n  handleAddCurrency = () => {\n    const { currencyDisplays, selectedNewCurrency } = this.state;\n\n    this.setState({\n      currencyDisplays: [...currencyDisplays, selectedNewCurrency],\n      selectedNewCurrency: '',\n      isAddMoreCurrency: false\n    });\n  };\n\n  handleDeleteCurrency = deletedCurrency => {\n    const { currencyDisplays } = this.state;\n\n    // remove deleted currency from displayed currency state\n    const filteredCurrency = currencyDisplays.filter(\n      v => v !== deletedCurrency\n    );\n\n    this.setState({\n      currencyDisplays: filteredCurrency\n    });\n  };\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      baseValue,\n      currencyRates,\n      currencyDisplays,\n      selectedNewCurrency,\n      isAddMoreCurrency,\n      currencyNames\n    } = this.state;\n\n    return (\n      <Container>\n        <ForexBaseInput\n          value={baseValue}\n          onInputChange={this.handleInputChange}\n        />\n\n        <ForexDisplayList\n          error={error}\n          isLoaded={isLoaded}\n          baseValue={baseValue}\n          currencies={currencyDisplays}\n          rates={currencyRates}\n          currencyNames={currencyNames}\n          handleDeleteCurrency={this.handleDeleteCurrency}\n        />\n\n        <ForexAddCurrency\n          options={formatCurrencyOptions(currencyRates, currencyDisplays)}\n          value={selectedNewCurrency}\n          isAddMoreCurrency={isAddMoreCurrency}\n          onInputChange={this.handleInputChange}\n          onSubmitAddCurrency={this.handleAddCurrency}\n          onClickAddMoreCurrency={this.handleClickAddMoreCurrency}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default ForexContainer;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './App.css';\nimport ForexContainer from './containers/ForexContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <ForexContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}